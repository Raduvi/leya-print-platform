openapi: 3.0.3
info:
  title: Leya-Print - OpenAPI 3.0
  description: |-
    This is the Open API description of the Leya Server based on the OpenAPI 3.0 specification. 
    Leya Print is a powerful and user-friendly tool for generating PDFs from customizable templates. Leya Print is designed to make it easy for developers to create professional-looking PDF documents for a variety of purposes.
    
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.

    More info related to
    Swagger at [https://swagger.io](https://swagger.io).
    
    Some useful links:
    - [Leya-Print repository](https://gitlab.code-better.it/leya/leya-print/-/tree/develop)
    - [The source API definition for Leya-Print](https://gitlab.code-better.it/leya/leya-print/-/blob/36-OpenApi_Definition_of_rest_server/common/api/openapi-rest.yml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: info@leya-it-solutions.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://leya-print-demo.azurewebsites.net
tags:
  - name: pdf-service
    description: Service for processing PDFs
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: tpl-service
    description: Service for processing templates
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: auth-service
    description: Authentification operations
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /pdf/alive:
    get:
      tags:
        - pdf-service
      summary: Get health status for pdf service
      description: Gets status of pdf-service and related services that are needed for this service to run correctly like tpl-service and print front-end.
      operationId: alive
      responses:
        '200':
          description: Successful operation
        '404':
          description: Service not found
        '503':
          description: Service unavailable
  
  /pdf/{templateId}/*:
    get:
      tags:
        - pdf-service
      summary: Renders pdf by templateId
      description: Template id can be provided and package name.
      operationId: getPDFByTemplateId
      parameters:
        - name: templateId
          in: path
          description: Template Id
          required: true
          explode: false
          schema:
            type: string
        - name: query
          in: query
          description: Query parameters
          required: false
          schema:
            type: string
        - name: payload
          in: query
          description: PDF body json
          required: false
          explode: true
          schema:
           $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: successful operation
        '500':
          description: internal server error
  
  /pdf/{templateId}/:
    post:
      tags:
        - pdf-service
      summary: Renders pdf by templateId
      description: Template id can be provided and package name.
      operationId: postPDFByTemplateId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      parameters:
        - name: templateId
          in: path
          description: Template Id
          required: true
          explode: false
          schema:
            type: string
        - name: query
          in: query
          description: Query parameters
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '500':
          description: internal server error
  
  /tpl/alive:
    get:
      tags:
        - tpl-service
      summary: Returns health status of tpl-service
      description: Returns health status of tpl-service
      operationId: getTplServiceAlive
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
  
  /tpl:
    get:
      tags:
        - tpl-service
      summary: Gets all templates
      description: Gets all templates
      operationId: getTemplates
      responses:
        '200':
          description: successful operation
        '500':
          description: internal server error
  
  /tpl/{templateId}/exists:
    get:
      tags:
        - tpl-service
      summary: Checks if template exists by template id
      description: Returns true if template exists by template id
      operationId: getTemplateExists
      parameters:
        - name: templateId
          in: path
          description: Template Id
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          
  /tpl/:
    post:
      tags:
        - tpl-service
      summary: Insert template
      description: Adds a template
      operationId: tplPost
      parameters:
        - name: files
          in: query
          description: Template files
          required: true
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
        '500':
          description: internal server error
  
  /auth/alive:
    get:
      tags:
        - auth-service
      summary: Returns the service health status
      description: Get service status
      operationId: getAuthServiceAlive
      responses:
        '200':
          description: successful operation

components:
  schemas:
    Address:
      type: object
      properties:
        firstName?:
          type: string
        lastName?:
          type: string
        company?: 
          type: string
        street1?: 
          type: string
        street2?: 
          type: string
        zipCode?: 
          type: string
        city?:
          type: string
        country?: 
          type: string
    InvoicePosition:
      type: object
      properties:
        title:
          type: number
        quantity:
          type: number
        unit: 
          type: string
        pricePerUnit: 
          type: number
        vatPercent: 
          type: number
    Invoice:
      type: object
      properties:
        sender:
          type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'
            vatIdent:
              type: string
            phone: 
              type: string
            email: 
              type: string
            web: 
              type: string
            bankDetails:
              type: object
              properties:
                name: 
                  type: string
                iban: 
                  type: string
                bic: 
                  type: string
        recipient:
          type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'
        invoiceNo:
          type: string
        customerReference:
          type: string
        date:
          type: string
        positions:
          type: array
          items: 
            $ref: '#/components/schemas/InvoicePosition'
      xml:
        name: invoice
openapi: 3.0.3
info:
  title: Leya-Print - OpenAPI 3.0
  description: |-
    This is the Open API description of the Leya Server based on the OpenAPI 3.0 specification. 
    Leya Print is a powerful and user-friendly tool for generating PDFs from customizable templates. Leya Print is designed to make it easy for developers to create professional-looking PDF documents for a variety of purposes.
    
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.

    More info related to
    Swagger at [https://swagger.io](https://swagger.io).
    
    Some useful links:
    - [Leya-Print repository](https://gitlab.code-better.it/leya/leya-print/-/tree/develop)
    - [The source API definition for Leya-Print](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: emanuel.hein@code-better.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://leyaprint.swagger.io/api/v3
tags:
  - name: pdf-service
    description: Service for processing PDFs
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: tpl-service
    description: Service for processing templates
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: auth-service
    description: Authentification operations
paths:
  /pdf/alive:
    get:
      tags:
        - pdf-service
      summary: Get health status for pdf service
      description: Gets status of pdf-service and related services that are needed for this service to run correctly like tpl-service and print front-end.
      operationId: alive
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad Request
        '404':
          description: Service not found
  /pdf/:templateId/*:
    get:
      tags:
        - pdf-service
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
  /pdf/:templateId/:
    post:
      tags:
        - pdf-service
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid tag value
  /tpl/alive:
    get:
      tags:
        - tpl-service
      summary: Returns health status of tpl-service
      description: Returns health status of tpl-service
      operationId: getTplServiceAlive
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /tpl:
    get:
      tags:
        - tpl-service
      summary: Gets all templates
      description: Gets all templates
      operationId: getTemplates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /tpl/:
    post:
      tags:
        - tpl-service
      summary: Insert template
      description: Inserts a template
      operationId: tplPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /tpl-contents/:templateId:
    post:
      tags:
        - tpl-service
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: tpl-contents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order